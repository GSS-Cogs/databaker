#! /usr/bin/env python
"""
Databaker

Usage:
  bake [options] <recipe> <spreadsheets>...
  bake -h | --help | --version

Options:
  --log=<log_level>
"""
__version__ = '0.0.0'

from docopt import docopt
import os
import logging
import sys
import imp
import xypath

def fatal(message, error_code=1):
    logging.fatal(message)
    print message
    exit(error_code)

def set_log(log_level):
    """Disable logging if --log isn't set or is invalid.
       Crash in the latter case."""
    # TODO: log to file
    if log_level is None:
        logging.basicConfig(level=logging.FATAL + 1)
        return
    level = getattr(logging, log_level.upper(), None)
    if level is None:
        logging.basicConfig(level=logging.FATAL + 1)
        fatal("Didn't understand --log={}".format(log_level))
    logging.basicConfig(level=level)
    logging.info("Log level set to {} ({})".format(log_level, level))

def bake(spreadsheet_filename, recipe):
    logging.info("Baking {!r} with {!r}".format(spreadsheet_filename, options['<recipe>']))
    
def load_recipe(recipe_filename):
    # NOT CONVINCED THIS IS THE RIGHT APPROACH TODO TODO TODO NOTE
    recipe = imp.load_source('recipe', recipe_filename)
    assert recipe.OBS
    return recipe

if __name__ == '__main__':
    options = docopt(__doc__, version='databaker {}'.format(__version__))
    set_log(options['--log'])
    logging.debug("Arguments passed: {!r}".format(sys.argv))
    logging.debug("Parsed as {!r}".format(options))
    recipe = load_recipe(options['<recipe>'])
    for spreadsheet in options['<spreadsheets>']:
        bake(spreadsheet, recipe)
